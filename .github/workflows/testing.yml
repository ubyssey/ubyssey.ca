# name: Cross-browser Testing

# on:
#   # push:
#   #   branches: [ "develop" ]
#   # pull_request:
#   #   branches: [ "develop" ]
#   workflow_dispatch:

# jobs:
#   test_desktop_browsers:
#     strategy:
#       matrix:
#         browser: [chrome, firefox, edge]
#         python-version: [ 3.8 ]
#     runs-on: 'ubuntu-latest'

#     steps:
#       - uses: actions/checkout@v2      
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{ matrix.python-version }}
#       - name: Install Dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       # - name: Install Python packages and dependencies
#       #   run: |
#       #     pip install -r requirements-prd.txt --use-pep517 
#       #     pip install requests --upgrade
      
#       # - name: Set up Node.js environment
#       #   uses: actions/setup-node@v2.1.4
#       #   with:
#       #     node-version: 14.x  
      
#       # - name: Run gulp to ready frontend static files for production
#       #   run: |
#       #     cd ubyssey/static_src
#       #     npm install -g gulp
#       #     npm install
#       #     npm ddp
#       #     gulp build
#       #     rm -rf node_modules
#       #     cd ../../
      
#       # - name: Collect static files
#       #   run: |
#       #     export DJANGO_SETTINGS_MODULE="config.settings.development"
#       #     python manage.py collectstatic --noinput
#       #     rm -rf .git/ ubyssey/static_src/
            
#       - name: Install Chrome
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y wget curl unzip
#           wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
#           sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
#           sudo apt-get update
#           sudo apt-get install -y google-chrome-stable
      
#       - name: Install Edge
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y wget
#           wget https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
#           sudo install -o root -g root -m 644 microsoft.gpg /usr/share/keyrings/
#           sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge.list'
#           sudo rm microsoft.gpg
#           sudo apt-get update
#           sudo apt-get install -y microsoft-edge-stable
#           sudo apt-get update
#           sudo apt-get install -y wget
#           wget https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
#           sudo install -o root -g root -m 644 microsoft.gpg /usr/share/keyrings/
#           sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge.list'
#           sudo rm microsoft.gpg
#           sudo apt-get update
#           sudo apt-get install -y microsoft-edge-stable
      
#       - name: Install Firefox
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y firefox

#       # Run tests on different browsers
#       - name: Run tests on ${{ matrix.browser }}
#         run: |
#           if [ "${{ matrix.browser }}" = "chrome" ]; then
#             python ubyssey.ca/tests/test_usability.py chrome
#           elif [ "${{ matrix.browser }}" = "firefox" ]; then
#             python ubyssey.ca/tests/test_usability.py firefox
#           elif [ "${{ matrix.browser }}" = "edge" ]; then
#             python ubyssey.ca/tests/test_usability.py edge
#           elif [ "${{ matrix.browser }}" = "safari" ]; then
#             python ubyssey.ca/tests/test_usability.py safari
#           fi
name: Python application

on:
  push:
    branches: [ "1502-add-end-to-end-test-automation" ]
  pull_request:
    branches: [ "1502-add-end-to-end-test-automation" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
  
    - name: Get main Google Cloud service account credentials
      run: |
        echo $GCP_SA_KEY > client-secret.json
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  
    - name: Get media Google Cloud service account credentials
      run: |
        echo $GCP_MEDIA_SERVICE_ACCOUNT_CREDENTIALS > ubyssey-prd-ee6290e6327f.json
  
    - name: Get .env file
      run: |
        mkdir tmp
        cd tmp
        echo $DEPLOYMENT_ENV_VARS > .env
        cd ../
      env:
        DEPLOYMENT_ENV_VARS: ${{ secrets.DEPLOYMENT_ENV_VARS }}
  
    - name: Install Python packages and dependencies
      run: |
        pip install -r requirements-prd.txt --use-pep517
        pip install requests --upgrade
  
    - name: Set up Node.js environment
      uses: actions/setup-node@v2.1.4
      with:
        node-version: 14.x
  
    - name: Run gulp to ready frontend static files for production
      run: |
        echo "Changing directory to ubyssey/static_src"
        cd ubyssey/static_src
        
        echo "Installing gulp globally"
        npm install -g gulp
        
        echo "Installing npm packages"
        npm install
        
        echo "Running npm ddp"
        npm ddp
        
        echo "Running gulp build"
        gulp build
        
        echo "Removing node_modules"
        rm -rf node_modules
        
        echo "Changing directory back to project root"
        cd ../../
        pwd
  
    - name: Collect static files
      run: |
        export DJANGO_SETTINGS_MODULE="config.settings.development"
        python manage.py collectstatic --noinput
        rm -rf .git/ ubyssey/static_src/
    - id: 'auth'
      name: Authenticate with Google App Engine
      uses: google-github-actions/auth@v1
      with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Test selenium
      run: |
        export DJANGO_SETTINGS_MODULE="config.settings.development"
        pip install selenium
        pip install webdriver-manager
        docker build . -t ubyssey/ubyssey.ca:latest
        docker volume create --name=ubyssey_db_volume
        docker exec -t -i ubyssey_db bash
        mysql -u root -p
        create database ubyssey;
        quit;
        docker exec -t -i ubyssey_db bash
        python manage.py migrate   