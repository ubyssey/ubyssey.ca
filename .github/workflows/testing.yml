# on:
#   push:
#     branches: [ "add-a-CI/CD-pipeline" ]
#   pull_request:
#     branches: [ "add-a-CI/CD-pipeline" ]
    
# jobs:

#   test:  # Define a job named 'test'
#       name: Run unit tests  # A more descriptive name for the job
#       runs-on: ubuntu-22.04  # Specify the runner environment (Ubuntu 22.04)

#       steps:  # Steps to be run as part of this job
#           - name: Login to Docker Hub  # Step 1: Log in to Docker Hub
#             uses: docker/login-action@v1  # Use the docker/login-action to log in to Docker Hub
#             with:
#               username: ${{ secrets.DOCKERHUB_USERNAME }}  # Use the stored Docker Hub username
#               password: ${{ secrets.DOCKERHUB_TOKEN }}  # Use the stored Docker Hub token for authentication

#           - name: Checkout  # Step 2: Checkout the repository code
#             uses: actions/checkout@v2  # Use the checkout action to checkout the code

#           - name: Test  # Step 3: Run the tests
#             run: |
#               docker build . -t ubyssey/ubyssey.ca:latest
#               echo "Docker image built successfully"
#               git clone https://github.com/ubyssey/ubyssey-dev.git
#               docker volume create --name=ubyssey_db_volume
#               docker exec -t -i ubyssey_db bash
#               mysql -u root -pubyssey
#               CREATE DATABASE ubyssey;
#               quit;
#               # echo "Changed directory to .devcontainer"
#               # docker-compose up 
#               # --rm web sh -c "python3 manage.py test"
#               # ls
#               # cd ubyssey-dev
#               # pwd
#               # ls
#               # docker-compose run --rm web sh -c "python3 manage.py test"  # Use Docker Compose to run the Django unit tests
name: Django CI

on:
  push:
    branches: [ "add-a-CI/CD-pipeline" ]
  pull_request:
    branches: [ "add-a-CI/CD-pipeline" ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    services:
      db:
        image: mysql:5.7
        volumes:
          - database:/var/lib/mysql
        env:
          MYSQL_ROOT_PASSWORD: ubyssey
          MYSQL_DATABASE: ubyssey
        ports: ['3306:3306']
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      # selenium-chrome:
      #   image: selenium/standalone-chrome:latest
      #   ports:
      #     - 4444:4444
      #     - 7900:7900  # Optional: for VNC access to the browser
      #   # shm_size: 2gb  # Increase shared memory for better performance

      
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python packages and dependencies
        run: |
          pip install -r requirements-prd.txt --use-pep517 
          pip install requests --upgrade
      - name: Set up Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x  
      - name: Run gulp to ready frontend static files for production
        run: |
          cd ubyssey/static_src
          npm install -g gulp
          npm install
          npm ddp
          gulp build
          rm -rf node_modules
          cd ../../
      - name: Collect static files
        run: |
          export DJANGO_SETTINGS_MODULE="config.settings.development"
          python manage.py collectstatic --noinput
          rm -rf .git/ ubyssey/static_src/
      # - name: Wait for MySQL
      #   run: |
      #     for i in {30..0}; do
      #       if mysqladmin ping -h db --silent; then
      #         break
      #       fi
      #       echo 'Waiting for MySQL...'
      #       sleep 1
      #     done
      #     if [ "$i" = 0 ]; then
      #       echo 'MySQL did not start within the expected time'
      #       exit 1
      #     fi
      - name: Login to Docker Hub  # Step 1: Log in to Docker Hub
        uses: docker/login-action@v1  # Use the docker/login-action to log in to Docker Hub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Use the stored Docker Hub username
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # Use the stored Docker Hub token for authentication

      - name: Run Django server
        run: |
          export DJANGO_SETTINGS_MODULE="config.settings.development"
          docker volume create --name=ubyssey_db_volume
          docker-compose -f docker-compose-test.yml up -d
          docker-compose -f docker-compose-test.yml exec web python manage.py migrate
        env: 
          SQL_HOST: db
          # SQL_PORT: 3306
          SQL_DATABASE: ubyssey
          SQL_USER: root
          SQL_PASSWORD: ubyssey

          # docker ps
      - name: Get MySQL Container IP Address
        id: get_mysql_ip
        run: |
          CONTAINER_ID=$(docker-compose -f docker-compose-test.yml ps -q db)
          IP_ADDRESS=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID)
          echo "MYSQL_IP=$IP_ADDRESS" >> $GITHUB_ENV

      - name: Use MySQL IP Address
        run: |
          echo "MySQL IP Address is ${{ env.MYSQL_IP }}"
          echo $(docker-compose -f docker-compose-test.yml ps -q db)
      # - name: Run Migrations
      #   run: |
      #     export DJANGO_SETTINGS_MODULE="config.settings.development"
      #     # pwd

      #     python manage.py migrate
      #     # docker exec -it $(docker-compose -f docker-compose-test.yml ps -q db) bash
      #     # mysql -uroot -pubyssey
      #     pip install selenium
      #     echo "Testing started"
      #     # docker pull selenium/standalone-chrome
      #     # docker run -d -p 4444:4444 -p 7900:7900 --shm-size=2g selenium/standalone-chrome
      #     # export browser=chrome
      #     # echo "Selenium server started"
      #     # python manage.py test
      #   env: 
      #     SQL_HOST: 4c65af1389812f9dad357c0f06eaeb6b012a676d5a6692d7749d7c8413461133
      #     # SQL_PORT: 3306
      #     SQL_DATABASE: ubyssey
      #     SQL_USER: root
      #     SQL_PASSWORD: ubyssey
